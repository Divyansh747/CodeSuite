{"ast":null,"code":"import axios from 'axios';\nconst URL = 'http://0.0.0.0:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeJwtAuthenticationService(email, password) {\n    console.log(email);\n    return axios.post(`${URL}/authenticate`, {\n      email,\n      password\n    }).catch(console.log(\"LOGIN FAILED\"));\n  }\n\n  userRegistrationService(email, username, password) {\n    return axios.post(`${URL}/userRegistration`, {\n      email,\n      username,\n      password\n    }).catch(console.log(\"SIGNUP FAILED\"));\n  }\n\n  registerSuccessfulLoginForJwt(email, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email);\n    localStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email);\n    console.log(\"token: \" + token);\n    this.setupAxiosInterceptors(this.createJWTToken(token));\n  }\n\n  createJWTToken(token) {\n    console.log('Bearer ' + token);\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    localStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n  }\n\n  isUserLoggedIn() {\n    let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  setupAxiosInterceptors(token) {\n    console.log(this.isUserLoggedIn());\n    console.log(\"interceptors\" + token);\n    axios.interceptors.request.use(config => {\n      console.log(\"config\");\n\n      if (this.isUserLoggedIn()) {\n        console.log(\"YES\");\n        config.headers['Authorization'] = token;\n        console.log(token);\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/divyansh747/major_project/Major_Project_CodeSuite/Frontend/codesuite/src/Service/AuthenticationService.js"],"names":["axios","URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeJwtAuthenticationService","email","password","console","log","post","catch","userRegistrationService","username","registerSuccessfulLoginForJwt","token","sessionStorage","setItem","localStorage","setupAxiosInterceptors","createJWTToken","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUserName","interceptors","request","use","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAG,qBAAZ;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,+BAA+B,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAC7CC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,WAAOL,KAAK,CACXS,IADM,CACA,GAAER,GAAI,eADN,EACsB;AACzBI,MAAAA,KADyB;AAEzBC,MAAAA;AAFyB,KADtB,EAIJI,KAJI,CAKHH,OAAO,CAACC,GAAR,CAAY,cAAZ,CALG,CAAP;AAOH;;AAEDG,EAAAA,uBAAuB,CAACN,KAAD,EAAQO,QAAR,EAAkBN,QAAlB,EAA4B;AAC/C,WAAON,KAAK,CAACS,IAAN,CAAY,GAAER,GAAI,mBAAlB,EAAsC;AACzCI,MAAAA,KADyC;AAEzCO,MAAAA,QAFyC;AAGzCN,MAAAA;AAHyC,KAAtC,EAIJI,KAJI,CAKHH,OAAO,CAACC,GAAR,CAAY,eAAZ,CALG,CAAP;AAOH;;AAEDK,EAAAA,6BAA6B,CAACR,KAAD,EAAQS,KAAR,EAAe;AACxCC,IAAAA,cAAc,CAACC,OAAf,CAAuBd,gCAAvB,EAAyDG,KAAzD;AACAY,IAAAA,YAAY,CAACD,OAAb,CAAqBd,gCAArB,EAAuDG,KAAvD;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAUM,KAAtB;AACA,SAAKI,sBAAL,CAA4B,KAAKC,cAAL,CAAoBL,KAApB,CAA5B;AACH;;AAEDK,EAAAA,cAAc,CAACL,KAAD,EAAQ;AAClBP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYM,KAAxB;AACA,WAAO,YAAYA,KAAnB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACLL,IAAAA,cAAc,CAACM,UAAf,CAA0BnB,gCAA1B;AACAe,IAAAA,YAAY,CAACI,UAAb,CAAwBnB,gCAAxB;AACH;;AAEDoB,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGN,YAAY,CAACO,OAAb,CAAqBtB,gCAArB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AAEnB,WAAO,IAAP;AACH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB,QAAIF,IAAI,GAAGN,YAAY,CAACO,OAAb,CAAqBtB,gCAArB,CAAX;AACA,QAAIqB,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDL,EAAAA,sBAAsB,CAACJ,KAAD,EAAQ;AAC1BP,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKc,cAAL,EAAZ;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAeM,KAA3B;AACAd,IAAAA,KAAK,CAAC0B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACRtB,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,UAAI,KAAKc,cAAL,EAAJ,EAA2B;AACvBf,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAqB,QAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkChB,KAAlC;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACH;;AACD,aAAOe,MAAP;AACH,KATL;AAWH;;AAnEuB;;AAsE5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst URL = 'http://0.0.0.0:8080'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeJwtAuthenticationService(email, password) {\n        console.log(email);\n        return axios\n        .post(`${URL}/authenticate`, {\n            email,\n            password\n        }).catch(\n            console.log(\"LOGIN FAILED\")\n        )\n    }\n\n    userRegistrationService(email, username, password) {\n        return axios.post(`${URL}/userRegistration`, {\n            email,\n            username,\n            password\n        }).catch(\n            console.log(\"SIGNUP FAILED\")\n        ) \n    }\n\n    registerSuccessfulLoginForJwt(email, token) {\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email)\n        localStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, email)\n        console.log(\"token: \"+token)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        console.log('Bearer ' + token)\n        return 'Bearer ' + token\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        localStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        \n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n        console.log(this.isUserLoggedIn())\n        console.log(\"interceptors\"+token)\n        axios.interceptors.request.use(\n            (config) => {\n                console.log(\"config\")\n                if (this.isUserLoggedIn()) {\n                    console.log(\"YES\")\n                    config.headers['Authorization'] = token\n                    console.log(token)\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()\n"]},"metadata":{},"sourceType":"module"}