{"ast":null,"code":"var _jsxFileName = \"/home/divyansh747/major_project/Major_Project_CodeSuite/Frontend/codesuite/src/Components/Compiler.js\";\nimport React from 'react';\nimport { Form, FormGroup, Input, Container, Button, Spinner } from 'reactstrap';\nimport axios from 'axios';\nimport api from '../api/api.js';\nimport { Jumbotron } from 'reactstrap';\n\nclass Compiler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      codeFile: null,\n      inputFile: null,\n      output: [],\n      requiredOutput: [],\n      statusCode: [],\n      isLoading: false\n    };\n    this.handleForm = this.handleForm.bind(this);\n    this.onChangeFirst = this.onChangeFirst.bind(this);\n    this.onChangeSecond = this.onChangeSecond.bind(this);\n    this.postDataToServer = this.postDataToServer.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = \"Compiler\";\n    console.log(\"title set\");\n  }\n\n  onChangeFirst(e) {\n    this.setState({\n      codeFile: e.target.files[0]\n    });\n  }\n\n  onChangeSecond(e) {\n    this.setState({\n      inputFile: e.target.files[0]\n    });\n  }\n\n  handleForm(e) {\n    e.preventDefault();\n    this.postDataToServer(this.state.codeFile, this.state.inputFile).then(response => {\n      console.log(response);\n    });\n  }\n\n  postDataToServer(codeFile, inputFile) {\n    const language = document.getElementById(\"language\").value;\n    const formData = new FormData();\n    formData.append('codeFile', codeFile);\n    formData.append('inputFile', inputFile);\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    };\n    this.setState({\n      output: [],\n      statusCode: [],\n      isLoading: true\n    });\n    return axios.post(`${api}/${language}`, formData, config).then(response => {\n      console.log(response);\n      console.log(\"compiler api called\");\n      this.setState({\n        output: response.data.output,\n        statusCode: response.data.statuscode,\n        isLoading: false\n      });\n    }, error => {\n      console.log(error);\n      console.log(\"error\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, \"Compiler\")), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, \"Select Programming Language\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: \"select\",\n      id: \"language\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"c\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, \"cpp\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, \"java\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, \"python\"))), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, \"Upload Code File\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"file\",\n      onChange: this.onChangeFirst,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, \"Upload Input File\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"file\",\n      onChange: this.onChangeSecond,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Container, {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, \"Compile\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, \"Output:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, this.state.isLoading === true && /*#__PURE__*/React.createElement(Spinner, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 54\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, this.state.output), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, \"Status Code:\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, this.state.isLoading === true && /*#__PURE__*/React.createElement(Spinner, {\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 54\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, this.state.statusCode)));\n  }\n\n}\n\nexport default Compiler;","map":{"version":3,"sources":["/home/divyansh747/major_project/Major_Project_CodeSuite/Frontend/codesuite/src/Components/Compiler.js"],"names":["React","Form","FormGroup","Input","Container","Button","Spinner","axios","api","Jumbotron","Compiler","Component","constructor","props","state","codeFile","inputFile","output","requiredOutput","statusCode","isLoading","handleForm","bind","onChangeFirst","onChangeSecond","postDataToServer","componentDidMount","document","title","console","log","e","setState","target","files","preventDefault","then","response","language","getElementById","value","formData","FormData","append","config","headers","post","data","statuscode","error","render","onChange"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Form, FormGroup, Input, Container, Button, Spinner} from 'reactstrap'\nimport axios from 'axios'\nimport api from '../api/api.js'\nimport { Jumbotron } from 'reactstrap';\n\nclass Compiler extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            codeFile: null,\n            inputFile: null,\n            output: [],\n            requiredOutput: [],\n            statusCode: [],\n            isLoading: false\n        }\n        this.handleForm = this.handleForm.bind(this)\n        this.onChangeFirst = this.onChangeFirst.bind(this)\n        this.onChangeSecond = this.onChangeSecond.bind(this)\n        \n        this.postDataToServer = this.postDataToServer.bind(this)\n    }\n\n    componentDidMount() {\n        document.title = \"Compiler\"\n        console.log(\"title set\")\n    }\n\n    onChangeFirst(e) {\n        this.setState({\n            codeFile: e.target.files[0], \n        })\n    }\n\n    onChangeSecond(e) {\n        this.setState({\n            inputFile: e.target.files[0],\n        })\n    }\n\n\n    handleForm(e) {\n        e.preventDefault()\n        this.postDataToServer(\n            this.state.codeFile, \n            this.state.inputFile\n            ).then((response) => {\n                console.log(response)\n            } )\n        \n    }\n\n    postDataToServer(codeFile, inputFile) {\n        const language = document.getElementById(\"language\").value\n        const formData = new FormData()\n        formData.append('codeFile',codeFile)\n        formData.append('inputFile', inputFile)\n        const config = { headers: { 'Content-Type': 'multipart/form-data' } };\n        this.setState({\n            output: [],\n            statusCode: [],\n            isLoading: true \n        })\n        return axios.post(`${api}/${language}`, formData, config).then(\n            (response) =>  {\n                console.log(response)\n                console.log(\"compiler api called\")\n                this.setState({\n                    output: response.data.output,\n                    statusCode: response.data.statuscode,\n                    isLoading: false\n                })\n            },(error) => {\n                console.log(error)\n                console.log(\"error\")\n            }\n        )\n    }\n\nrender() {\n    return(\n        <div>\n            <Jumbotron>\n            <h1 className=\"text-center\">Compiler</h1>\n            </Jumbotron>\n            <Form onSubmit={this.handleForm}>\n            <FormGroup>\n                <label>Select Programming Language</label>\n                <br/>\n                <Input type=\"select\" id=\"language\" onChange={this.onChange}>\n                    <option>c</option>\n                    <option>cpp</option>\n                    <option>java</option>\n                    <option>python</option>\n                </Input>\n            </FormGroup>\n\n            <FormGroup>\n                <label>Upload Code File</label>\n                <Input type=\"file\" onChange={this.onChangeFirst}></Input>\n            </FormGroup>\n\n       \n            <FormGroup>\n                <label>Upload Input File</label>\n                <Input type=\"file\" onChange={this.onChangeSecond}></Input>\n            </FormGroup>\n\n            <Container className=\"text-center\">\n                    <Button type=\"submit\" color=\"success\">Compile</Button>\n            </Container>\n            \n            </Form>\n            <br/>\n            <Jumbotron>\n                <h3>Output:</h3>\n                <p>{this.state.isLoading === true && <Spinner color={\"primary\"} />}</p> \n                \n                { \n                    <p>{this.state.output}</p> \n                \n                }\n                <br/>\n                <h3>Status Code:</h3>\n                <p>{this.state.isLoading === true && <Spinner color={\"primary\"} />}</p> \n                \n                { \n                    <p>{this.state.statusCode}</p>    \n                }\n            </Jumbotron>\n\n        </div>\n    )\n}\n}\n\nexport default Compiler"]},"metadata":{},"sourceType":"module"}